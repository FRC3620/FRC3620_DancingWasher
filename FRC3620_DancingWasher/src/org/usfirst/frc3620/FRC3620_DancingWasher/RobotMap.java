// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3620.FRC3620_DancingWasher;
    

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.RobotDrive.MotorType;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static SpeedController driveSpeedController1;
    public static SpeedController driveSpeedController0;

    public static RobotDrive driveRobotDrive;
    public static DigitalInput driveKillSwitch;
    
    public static Solenoid shooterSubsystemFillValve1;
    public static Solenoid shooterSubsystemFillValve2;
    public static Solenoid shooterSubsystemFillValve3;

    public static Solenoid shooterSubsystemShootValve1;
    public static Solenoid shooterSubsystemShootValve2;
    public static Solenoid shooterSubsystemShootValve3;
    
    public static AnalogInput shooterSubsystemPressureSensor1;
    public static AnalogInput shooterSubsystemPressureSensor2;
    public static AnalogInput shooterSubsystemPressureSensor3;
    
    public static DoubleSolenoid shooterSubsystemLid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSpeedController0 = new Talon(0);
        LiveWindow.addActuator("Drive", "Speed Controller 0", (Talon) driveSpeedController0);

        driveSpeedController1 = new Talon(1);
        LiveWindow.addActuator("Drive", "Speed Controller 1", (Talon) driveSpeedController1);
        
        driveRobotDrive = new RobotDrive(driveSpeedController0, driveSpeedController1);
        driveRobotDrive.setInvertedMotor(MotorType.kRearLeft, true);
        
        driveRobotDrive.setSafetyEnabled(false);
        driveRobotDrive.setExpiration(0.1);
        driveRobotDrive.setSensitivity(0.5);
        driveRobotDrive.setMaxOutput(1.0);

        driveKillSwitch = new DigitalInput(0);
        LiveWindow.addSensor("Drive", "KillSwitch", driveKillSwitch);
        
        //
        shooterSubsystemFillValve1 = new Solenoid(0);      
        LiveWindow.addActuator("ShooterSubsystem", "Fill Valve 1", shooterSubsystemFillValve1);
        
        shooterSubsystemShootValve1 = new Solenoid(1);      
        LiveWindow.addActuator("ShooterSubsystem", "Shoot Valve 1", shooterSubsystemShootValve1);
        
        shooterSubsystemPressureSensor1 = new AnalogInput(0);
        LiveWindow.addSensor("ShooterSubsystem", "Pressure Sensor 1", shooterSubsystemPressureSensor1);
        
        //
        shooterSubsystemFillValve2 = new Solenoid(2);      
        LiveWindow.addActuator("ShooterSubsystem", "Fill Valve 2", shooterSubsystemFillValve2);
        
        shooterSubsystemShootValve2 = new Solenoid(3);      
        LiveWindow.addActuator("ShooterSubsystem", "Shoot Valve 2", shooterSubsystemShootValve2);
        
        shooterSubsystemPressureSensor2 = new AnalogInput(1);
        LiveWindow.addSensor("ShooterSubsystem", "Pressure Sensor 2", shooterSubsystemPressureSensor2);
        
        //
        shooterSubsystemFillValve3 = new Solenoid(4);      
        LiveWindow.addActuator("ShooterSubsystem", "Fill Valve 3", shooterSubsystemFillValve3);
        
        shooterSubsystemShootValve3 = new Solenoid(5);      
        LiveWindow.addActuator("ShooterSubsystem", "Shoot Valve 3", shooterSubsystemShootValve3);
        
        shooterSubsystemPressureSensor3 = new AnalogInput(2);
        LiveWindow.addSensor("ShooterSubsystem", "Pressure Sensor 3", shooterSubsystemPressureSensor3);
        
        //
        
        shooterSubsystemLid = new DoubleSolenoid(0, 6, 7);      
        LiveWindow.addActuator("ShooterSubsystem", "Lid", shooterSubsystemLid);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}