// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3620.FRC3620_DancingWasher.commands;

//import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc3620.FRC3620_DancingWasher.Robot;
import org.usfirst.frc3620.FRC3620_DancingWasher.subsystems.Shooter;
import org.usfirst.frc3620.FRC3620_DancingWasher.subsystems.ShooterSubsystem;
import org.usfirst.frc3620.FRC3620_DancingWasher.subsystems.ShootingSystemState;



public class ShootTShirtCommandX extends Command {
	ShooterSubsystem shooterSubsystem = Robot.shooterSubsystem;
	Shooter shooter;

	RumbleCommand rumbleCommand = new RumbleCommand();

	public ShootTShirtCommandX() {
		super();
	}

	// Called just before this Command runs the first time
	protected void initialize() {
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		if (!Robot.shooterSubsystem.isLidUp) {
			rumbleCommand.setMessage("Can't shoot with lid up");
			rumbleCommand.start();
		} else {
			ShootingSystemState currentState = shooter.getShootingSystemState();
			if (currentState == ShootingSystemState.ALLREADY) {
				shooter.setShootingSystemState(ShootingSystemState.SHOOTING);
			} else {
				rumbleCommand.setMessage("#" + shooter.getShooterNumber() + " is not ready to shoot");
				rumbleCommand.start();
			}
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return true;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}

}
