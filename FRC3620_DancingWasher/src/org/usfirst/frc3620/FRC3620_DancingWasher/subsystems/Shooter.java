// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3620.FRC3620_DancingWasher.subsystems;

import org.usfirst.frc3620.FRC3620_DancingWasher.Robot;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Shooter {
	int shooterNumber = 0;
	
	ShooterSubsystem shooterSubsystem = Robot.shooterSubsystem;
	
	Relay shootValve;

	private ShootingSystemState currentState = ShootingSystemState.IDLE;
	
	private double tankPressure = -1;
	
	public Shooter (int _shooterNumber, Relay _shootValve) {
		super();
		shooterNumber = _shooterNumber;
		shootValve = _shootValve;
	}

	public void startShooter()
	{
		shootValve.set(Relay.Value.kForward);
	}

	public void stopShooter()
	{
		shootValve.set(Relay.Value.kOff);
	}

	Timer shootingTimer = null;
	
	public void makeTheShooterWork(){
		switch (currentState) {
		case IDLE:
			stopShooter();
			break;

		case FILLING:
			stopShooter();
			shooterSubsystem.startFilling(shooterNumber);
			tankPressure = Robot.shooterSubsystem.getShootingTankPressure();
			updateDashboardWithTankPressure();
			if (tankPressure > shooterSubsystem.fillPressure)
			{
				setShootingSystemState(ShootingSystemState.ALLREADY);

				shooterSubsystem.stopFilling();
			}

			break;

		case ALLREADY:
			stopShooter();
			break;

		case SHOOTING:
			startShooter();

			if (shootingTimer == null)
			{
				shootingTimer = new Timer();
				shootingTimer.reset();
				shootingTimer.start();
			}
			if (shootingTimer.get() > .5)
			{
				shootingTimer = null;
				setShootingSystemState(ShootingSystemState.IDLE);
				tankPressure = -1;
				updateDashboardWithTankPressure();
			}
			break;
		}

	}
	
	public ShootingSystemState getShootingSystemState() {
		return currentState;
	}
	
	public void setShootingSystemState (ShootingSystemState newState) {
		currentState = newState;
		updateDashboardWithCurrentShooterState();
	}
	
	private void updateDashboardWithCurrentShooterState() {
		SmartDashboard.putString("Shooter" + shooterNumber, currentState.toString());
		Robot.writeToDS("Shooter" + shooterNumber + " is in state " + currentState.toString());
	}
	
	private void updateDashboardWithTankPressure() {
		SmartDashboard.putNumber("tank " + shooterNumber + " pressure", tankPressure);
	}
	
	public void initializeDashboard() {
		updateDashboardWithCurrentShooterState();
		updateDashboardWithTankPressure();
	}
	
	public int getShooterNumber() {
		return shooterNumber;
	}

}
