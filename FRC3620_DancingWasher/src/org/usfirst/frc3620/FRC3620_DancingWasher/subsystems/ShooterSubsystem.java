// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3620.FRC3620_DancingWasher.subsystems;

import org.usfirst.frc3620.FRC3620_DancingWasher.Robot;
import org.usfirst.frc3620.FRC3620_DancingWasher.RobotMap;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class ShooterSubsystem extends Subsystem {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DoubleSolenoid fillValve = RobotMap.shooterSubsystemFillValve;
    Relay tank1Shoot = RobotMap.shooterSubsystemTank1Shoot;
    AnalogInput pressureSensor = RobotMap.shooterSubsystemPressureSensor;
    DoubleSolenoid tank1Lid = RobotMap.shooterSubsystemTank1Lid;
    AnalogInput a0 = RobotMap.shooterSubsystema0;
    DoubleSolenoid directionValve = RobotMap.shooterSubsystemDirectionValve;
    Relay tank2Shoot = RobotMap.shooterSubsystemTank2Shoot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // THIS IS HOW FAR WE FILL THE TANK!
    final double fillPressure = 75;
    
    public Shooter shooter1;
    public Shooter shooter2;

	public boolean isLidUp = false;
	public boolean[] safetiesPressed = new boolean[2];
	
	public int whoIsFilling = 0;
	
	public ShooterSubsystem() {
		super();
		shooter1 = new Shooter(1, tank1Shoot);
		shooter2 = new Shooter(2, tank2Shoot);
	}

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	// TODO
	// add methods to start and stop shoowing2
	// add methods to set direction value to tank1 or tank2

	public void startFilling(int i) {
		if (fillerIsAvailable()) {
			whoIsFilling = i;
			setDirectionValve(i);
			fillValve.set(Value.kForward);
		} else {
			if (i != whoIsFilling) {
				Robot.writeToDS("tried to fill " + i + " when already filling " + whoIsFilling);
			}
		}
	}

	public void stopFilling()
	{
		fillValve.set(Value.kReverse);
		whoIsFilling = 0;
	}
	
	public boolean fillerIsAvailable() {
		return whoIsFilling == 0;
	}

	private void setDirectionValve(int i) {
	if (i == 1)
	{
		directionValve.set(Value.kForward);
	}
	else
	{
		directionValve.set(Value.kReverse);
	}
	}

	public double getShootingTankPressure()
	{
		double voltage = pressureSensor.getVoltage();
		double pressure;

		if (voltage <= 1.7)
		{
			// 0.5 v = 00 lb
			// 1.3 v = 30 lb
			pressure = (voltage - 0.5) * (10 / 0.3);
		} else
		{
			// 1.7 v = 40 lb
			// 2.0 v = 50 lb
			// 2.3 v = 60 lb
			// 2.6 v = 70 lb
			pressure = 40 + (voltage - 1.7) * (10 / 0.3);
		}
		return pressure;
	}

	public void liftLid()
	{
		tank1Lid.set(Value.kForward);
		isLidUp = true;
	}

	public void dropLid()
	{
		tank1Lid.set(Value.kReverse);
		isLidUp = false;
	}

	public void initializeDashboard() {
		shooter1.initializeDashboard();
		shooter2.initializeDashboard();
		updateDashboardFromSensors();
	}

    public void updateDashboardFromSensors()
    {
        SmartDashboard.putNumber("PressureSensorPSI", getShootingTankPressure());
        SmartDashboard.putNumber("PressureSensorVoltage", pressureSensor.getVoltage());
    }
    
    public void teleopPeriodic() {
    	shooter1.makeTheShooterWork();
    	shooter2.makeTheShooterWork();
    }
}
