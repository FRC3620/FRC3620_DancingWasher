// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3620.FRC3620_DancingWasher.subsystems;

import org.usfirst.frc3620.FRC3620_DancingWasher.Robot;
import org.usfirst.frc3620.FRC3620_DancingWasher.RobotMap;
import org.usfirst.frc3620.logger.EventLogging;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class ShooterSubsystem extends Subsystem {
    public ShooterSubsystem() {
        super();
        barrels = new Barrel[3];
        barrels[0] = new Barrel("Barrel 1", RobotMap.shooterSubsystemFillValve1,
                RobotMap.shooterSubsystemShootValve1,
                RobotMap.shooterSubsystemPressureSensor1);
        barrels[1] = new Barrel("Barrel 2", RobotMap.shooterSubsystemFillValve2,
                RobotMap.shooterSubsystemShootValve2,
                RobotMap.shooterSubsystemPressureSensor2);
        barrels[2] = new Barrel("Barrel 3", RobotMap.shooterSubsystemFillValve3,
                RobotMap.shooterSubsystemShootValve3,
                RobotMap.shooterSubsystemPressureSensor3);
    }

    DoubleSolenoid lid = RobotMap.shooterSubsystemLid;

    Barrel[] barrels;

    // THIS IS HOW FAR WE FILL THE TANK!
    double fillPressure = edu.wpi.first.wpilibj.Preferences.getInstance()
            .getDouble("fillPressure", 40);

    public boolean isLidUp = false;
    public boolean[] safetiesPressed = new boolean[2];

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    // TODO
    // add methods to start and stop shoowing2
    // add methods to set direction value to tank1 or tank2

    public void liftLid() {
        lid.set(Value.kForward);
        isLidUp = true;
    }

    public void dropLid() {
        lid.set(Value.kReverse);
        isLidUp = false;
    }
    
    public void makeTheShooterWork() {
        for (Barrel b: barrels) {
            b.periodic(); 
         }
    }
    
    public boolean fill(int barrel) {
        return barrels[barrel-1].fill();
    }

    public boolean shoot(int barrel) {
        return barrels[barrel-1].shoot();
    }

    public void initializeDashboard() {
    }

    public void updateDashboardFromSensors() {
    }
}
